server.port=8036
spring.application.name=evening-dubbo-file-seata

#Dubbo的配置
#dubbo提供者的别名，只是个标识
spring.dubbo.application.name=evening-provider
#zk地址
spring.dubbo.registry.address=zookeeper://47.104.78.115:4181
#dubbo协议
spring.dubbo.protocol.name=dubbo
#duboo端口号
spring.dubbo.protocol.port=20885
#这是你要发布到dubbo的接口所在包位置
spring.dubbo.scan=com.hulunbuir.clam.evening.provider

#数据源
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1/collection?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=123456
# 初始化时建立物理连接的个数
spring.datasource.druid.initial-size=5
# 最大连接池数量
spring.datasource.druid.max-active=30
# 最小连接池数量
spring.datasource.druid.min-idle=5
# 获取连接时最大等待时间，单位毫秒
spring.datasource.druid.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=60000
# 连接保持空闲而不被驱逐的最小时间
spring.datasource.druid.min-evictable-idle-time-millis=300000
# 用来检测连接是否有效的sql，要求是一个查询语句
spring.datasource.druid.validation-query=SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.druid.test-while-idle=true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-borrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.druid.test-on-return=false
# 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.druid.pool-prepared-statements=true
# 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=50
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计
spring.datasource.druid.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connection-properties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
# 合并多个DruidDataSource的监控数据
spring.datasource.druid.use-global-data-source-stat=true

#mybatis-plus
#扫描的mapper的xml文件
mybatis-plus.mapper-locations=classpath:com/hulunbuir/clam/evening/persistence/mapper/xml/*Mapper.xml
#输出SQL
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.slf4j.Slf4jImpl
#seata分布式事务异常回滚，实现分布式事务的解决方案
spring.cloud.alibaba.seata.tx-service-group=seata_file_tx_group


#spring.boot.admin.client.url 指向我们服务端的项目接口路径。
spring.boot.admin.client.url=http://127.0.0.1:8016
#client信息中项目实例所需要访问的地址
spring.boot.admin.client.instance.service-url=http://127.0.0.1:8036
spring.boot.admin.client.enabled=true
# 这里需要注意的是，如果admin-server 中没有集成 security 的话，不用配置用户名和密码也可以注册进去，在服务端可以监控到，
# 但如果admin-server 集成了security，就需要保证client 中配置的用户名和server 中配置的用户名密码保持一致。
# spring.boot.admin.client.username 和password 就是设置的用户名和密码了，
spring.boot.admin.client.username=admin
spring.boot.admin.client.password=admin
spring.security.user.name=admin
spring.security.user.password=admin
# management.endpoints.web.exposure.include 表示将所有端口都暴露出来，可以被监控到。
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=ALWAYS
management.endpoint.shutdown.enabled=true
spring.boot.admin.notify.mail.enabled=false
spring.jmx.enabled=true

jasypt.encryptor.password=EbfYkiXtuClv73IF2p0mXI50JaSEMXoAxZTWKJ0
jasypt.encryptor.property.prefix=ENC@[
jasypt.encryptor.property.suffix=]

#spring.mail.host=smtp.163.com
#spring.mail.port=25
#spring.mail.username=qjyn1314@163.com
#spring.mail.password=ENC@[hQV8b1IoxBjYTIA/7ZUimHq1+O8okRTF]
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.properties.mail.smtp.starttls.required=true
#spring.mail.default-encoding=UTF-8

#hulun-buit.mail.sender=qjyn1314@163.com
